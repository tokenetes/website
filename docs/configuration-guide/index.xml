<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Configuration Guide on Tokenetes</title>
    <link>https://tokenetes.io/docs/configuration-guide/</link>
    <description>Recent content in Configuration Guide on Tokenetes</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://tokenetes.io/docs/configuration-guide/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TraT</title>
      <link>https://tokenetes.io/docs/configuration-guide/trat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokenetes.io/docs/configuration-guide/trat/</guid>
      <description>A TraT resource corresponds to a TraT type, defining a TraT for an external API. It defines how to generate the TraT for an external API and how to verify the TraT in the resulting internal requests. Additionally, it supports access evaluation for external APIs. A TraT resource comprises four sections: External API Specification, TraT Generation, TraT Verification, and Access Evaluation.
The external API specification section specifies the external API for which the TraT is defined.</description>
    </item>
    
    <item>
      <title>TraTExclusion</title>
      <link>https://tokenetes.io/docs/configuration-guide/trat-exclusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokenetes.io/docs/configuration-guide/trat-exclusion/</guid>
      <description>The TraTExclusion resource is used to specify endpoints of a service that do not require TraTs. This is particularly useful for non-functional APIs, such as health checks and monitoring, or for functional APIs that have not yet been adapted to support TraTs. The configuration is specific to each service.
Below is an example of TraTExclusion for the order service:
apiVersion: tokenetes.io/v1alpha1 kind: TraTExclusion metadata: name: order-service-tratexcl namespace: alpha-stocks-dev spec: service: order endpoints: - path: &amp;#34;/health&amp;#34; method: &amp;#34;GET&amp;#34; </description>
    </item>
    
    <item>
      <title>TokenetesConfig</title>
      <link>https://tokenetes.io/docs/configuration-guide/tokenetes-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokenetes.io/docs/configuration-guide/tokenetes-config/</guid>
      <description>The TokenetesConfig resource defines general configuration settings that apply to all APIs and TraTs within a specified Kubernetes namespace.
Let&amp;rsquo;s delve into the details of TraTs by examining an example.
apiVersion: tokenetes.io/v1alpha1 kind: TokenetesConfig metadata: name: alpha-stocks-tokenetescfg namespace: alpha-stocks-dev spec: token: issuer: &amp;#34;https://alphastocks.com/tokenetes&amp;#34; audience: &amp;#34;https://alphastocks.com/&amp;#34; lifeTime: &amp;#34;15s&amp;#34; subjectTokens: OIDC: clientId: alpha-stocks-client providerURL: http://dex:5556/dex subjectField: email selfSigned: validation: false jwksEndpoint: &amp;#34;http://alphastocks.com/oidcprovider/.well-known/jwks.json&amp;#34; accessEvaluationAPI: enableAccessEvaluation: false endpoint: &amp;#34;https://alphastocks.authzen.com/access/v1/evaluation&amp;#34; authentication: method: &amp;#34;Bearer&amp;#34; token: value: &amp;#34;${AUTHORIZATION_API_BEARER_TOKEN}&amp;#34; tokenGenerationAuthorizedServiceIds: - &amp;#34;spiffe://dev.</description>
    </item>
    
    <item>
      <title>Example Application Configurations</title>
      <link>https://tokenetes.io/docs/configuration-guide/example-application-configs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokenetes.io/docs/configuration-guide/example-application-configs/</guid>
      <description>Below are the Tokenetes Kubernetes resources for the Tokenetes example application. These examples can serve as references when writing the resources for your microservices application.
TraTs The Tokenetes example application has four external APIs; consequently, there are four TraT resources.
stock-details-api-trat.yaml:
apiVersion: tokenetes.io/v1alpha1 kind: TraT metadata: name: stock-details-api-trat namespace: alpha-stocks-dev spec: path: &amp;#34;/api/stocks/details/{#stockId}&amp;#34; method: &amp;#34;GET&amp;#34; purp: stock-details azdMapping: stockId: required: true value: &amp;#34;${stockId}&amp;#34; services: - name: stocks accessEvaluation: subject: id: &amp;#34;${subject_token.</description>
    </item>
    
  </channel>
</rss>
